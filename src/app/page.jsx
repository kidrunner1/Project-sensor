'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { loginUser } from '@/app/serviveAPI/Login/serviceLogin';
import Swal from 'sweetalert2';
import { verifyOtp } from '@/app/serviveAPI/OTP/otpService'; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ verifyOtp
import Link from 'next/link';
import { FaEnvelope, FaGoogle } from "react-icons/fa";
import { MdLockOutline } from "react-icons/md";
import dynamic from 'next/dynamic';

// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Lottie JSON ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ Client-Side ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
const Lottie = dynamic(() => import('lottie-react'), { ssr: false });
import loadingAnimation from '@/app/animations/loading.json';




export default function Login() {
  const [identifier, setIdentifier] = useState('');
  const [password, setPassword] = useState('');
  const [otp, setOtp] = useState(Array(6).fill("")); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö OTP ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå 6 ‡∏ä‡πà‡∏≠‡∏á
  const [loading, setLoading] = useState(false);
  const [otpRequired, setOtpRequired] = useState(false);
  const [userId, setUserId] = useState(null);
  const [errors, setErrors] = useState({ identifier: '', password: '', login: '' });
  const [expiresAt, setExpiresAt] = useState(null);
  const router = useRouter();

  useEffect(() => {
    if (typeof window !== 'undefined') {
      const storedUserId = localStorage.getItem('user_id');
      if (storedUserId) {
        console.log("‚úÖ ‡∏û‡∏ö `user_id` ‡πÉ‡∏ô Local Storage:", storedUserId);
        router.push('/MainDashboard');
      } else {
        console.warn("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö `user_id` ‚Üí ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Login ‡πÉ‡∏´‡∏°‡πà");
      }
    }
  }, []);

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Validation
  const validateInputs = () => {
    const newErrors = {};
    if (!identifier.trim()) {
      newErrors.identifier = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•";
    } else if (!/^[a-zA-Z0-9@.]+$/.test(identifier)) {
      newErrors.identifier = "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô A-Z, a-z, 0-9 ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô";
    }
    if (!password.trim()) {
      newErrors.password = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô";
    } else if (password.length < 6) {
      newErrors.password = "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£";
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleLoginSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    if (!validateInputs()) {
      Swal.fire({
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        icon: "warning",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á"
      });
      setLoading(false);
      return;
    }

    try {
      const loginResponse = await loginUser(identifier, password);
      if (loginResponse?.success) {
        setExpiresAt(loginResponse.expiresAt);

        if (loginResponse.otpRequired) {
          setOtpRequired(true);
          setUserId(loginResponse.userId);

          Swal.fire({
            title: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å OTP',
            text: '‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ OTP ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô',
            icon: 'info',
            confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
          });
        } else {
          localStorage.setItem('user_id', loginResponse.userId);

          Swal.fire({
            title: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
            text: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö!',
            icon: 'success',
            confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
          }).then(() => {
            router.push('/MainDashboard');
          });
        }
      } else {
        Swal.fire({
          title: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
          text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
          icon: 'error',
          confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
        });
      }
    } catch (error) {
      Swal.fire({
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        text: error.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ',
        icon: 'error',
        confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
      });
    } finally {
      setLoading(false);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï OTP ‡∏ó‡∏µ‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ + ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)
  const handleOtp = (index, value) => {
    if (!/^[a-zA-Z0-9]*$/.test(value)) return; // ‚úÖ ‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ A-Z, a-z, 0-9

    const newOtp = [...otp];
    newOtp[index] = value;
    setOtp(newOtp);

    // ‚úÖ ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏ä‡πà‡∏≠‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à
    if (value && index < 5) {
      document.getElementById(`otp-${index + 1}`)?.focus();
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á OTP ‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
  const handleOtpSubmit = async () => {
    const otpString = otp.join(""); // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á

    if (!otpString || !userId) {
      Swal.fire({
        title: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å OTP ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô',
        text: 'OTP ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ',
        icon: 'warning',
        confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
      });
      return;
    }

    try {
      console.log("üîπ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á API Verify OTP:", { userId, otpString });

      const otpResponse = await verifyOtp(userId, otpString); // ‚úÖ ‡∏™‡πà‡∏á OTP ‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô String

      console.log("üìå OTP API Response:", otpResponse);

      if (otpResponse?.message.toLowerCase().includes("otp verified")) {
        const finalUserId = otpResponse.user_id || userId;
        console.log("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å user_id ‡∏•‡∏á Local Storage:", finalUserId);

        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Local Storage
        localStorage.setItem('user_id', finalUserId);
        localStorage.setItem('access_token', otpResponse.access_token);
        localStorage.setItem('refresh_token', otpResponse.refresh_token);
        localStorage.setItem('access_expires_time', otpResponse.access_expires_time);
        localStorage.setItem('refresh_expires_time', otpResponse.refresh_expires_time);

        Swal.fire({
          title: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
          text: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î...',
          icon: 'success',
          confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
        }).then(() => {
          router.push('/MainDashboard');
        });

      } else {
        console.warn("‚ùå OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:", otpResponse?.message);
        Swal.fire({
          title: 'OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
          text: otpResponse?.message || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
          icon: 'error',
          confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
        });
      }

    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP:", error);
      Swal.fire({
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        text: error.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡πÑ‡∏î‡πâ',
        icon: 'error',
        confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
      });
    }
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen py-2 bg-gray-100">
      <main className="flex flex-col items-center justify-center w-full flex-1 px-6 md:px-20 text-center">
        <div className="bg-white rounded-2xl shadow-2xl flex flex-col md:flex-row w-full max-w-4xl">
          {/* LEFT SECTION */}
          <div className='w-full md:w-3/5 p-5'>
            <div className='font-bold text-zinc-800 justify-center'>
              <span className="text-zinc-800">DOG</span>NOSE
            </div>
            <div className="border-2 w-10 border-zinc-800 inline-block"></div>
            <h2 className="text-2xl md:text-3xl font-bold text-zinc-800 mb-2">
              ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
            </h2>

            {/* Social Login
            <div className="flex justify-center my-4 space-x-3">
              <button
                onClick={handleGoogleLogin}
                className="border-2 rounded-full p-3 bg-black"                 >
                <FaGoogle className="text-sm text-white" />
              </button>

            </div> */}
            <p className="text-zinc-800 my-3">‡∏´‡∏£‡∏∑‡∏≠</p>
            <form onSubmit={handleLoginSubmit} className='flex flex-col items-center'>

              {/* Username */}
              <div className="w-full max-w-sm md:w-64">
                <div className={`bg-gray-100 p-2 flex items-center rounded-md ${errors.identifier ? 'border-2 border-red-500' : ''}`}>
                  <FaEnvelope className="text-zinc-500 m-2" />
                  <input
                    type="text"
                    placeholder="‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
                    value={identifier}
                    onChange={(e) => setIdentifier(e.target.value)}
                    onBlur={validateInputs}
                    className="bg-gray-100 outline-none text-sm flex-1 text-black" />
                </div>
                {errors.identifier && <p className="text-red-500 text-xs text-left mt-1">{errors.identifier}</p>}
              </div>

              {/* Password */}
              <div className="w-full max-w-sm mt-2 md:w-64">
                <div className={`bg-gray-100 p-2 flex items-center rounded-md ${errors.password ? 'border-2 border-red-500' : ''}`}>
                  <MdLockOutline className="text-zinc-500 m-2" />
                  <input
                    type="password"
                    placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    onBlur={validateInputs}
                    className="bg-gray-100 outline-none text-sm flex-1 text-black" />
                </div>
                {errors.password && <p className="text-red-500 text-xs text-left mt-1">{errors.password}</p>}
              </div>


              <div className="flex justify-end w-full md:w-64 mb-5">
                <Link
                  href="/ForgotPassword"
                  className="text-xs text-zinc-800"
                >
                  ‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
                </Link>
              </div>
              <button
                type="submit"
                disabled={loading}
                className="border-2 border-zinc-800 text-zinc-800 rounded-full px-8 md:px-12 py-2 font-semibold hover:bg-zinc-800 hover:text-white">
                {loading ? (
                  <Lottie animationData={loadingAnimation} loop={true} className="w-8 h-8" />
                ) : (
                  "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"
                )}
              </button>
            </form>
          </div>

          {/* Right Section */}
          <div className="w-full md:w-2/5 bg-zinc-800 rounded-tl-lg text-white rounded-b-lg md:rounded-tr-2xl md:rounded-br-2xl py-12 px-6 md:py-36">
            <h2 className="text-2xl md:text-3xl font-bold mb-2">
              ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
            </h2>
            <div className="border-2 w-10 border-white inline-block mb-2"></div>
            <p className="mb-6 md:mb-10">‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤.</p>
            <Link
              href="/Register"
              className="border-2 border-white rounded-full px-8 md:px-12 py-2 font-semibold hover:bg-white hover:text-zinc-800"
            >
              ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
            </Link>
          </div>
        </div>
      </main>

      {/* ‡∏ü‡∏≠‡∏£‡πå‡∏° OTP */}
      {otpRequired && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
          <div className="bg-zinc-800 p-6 rounded-lg shadow-lg w-[400px] text-center ">
            {/* ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô */}
            <div className='flex flex-col items-center'>
              <img src="/images/OTP.png" alt="OTP Icon" className='w-16 h-16' />
              <h2 className='text-xl font-bold mt-3 text-zinc-100'>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h2>
              <p className="text-gray-500 text-sm mt-1">
                ‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™ OTP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠.
              </p>
            </div>
            {/* ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å OTP ‡πÅ‡∏ö‡∏ö‡πÅ‡∏¢‡∏Å 6 ‡∏ä‡πà‡∏≠‡∏á */}
            <div className='flex justify-center gap-2 mt-5'>
              {otp.map((num, index) => (
                <input
                  key={index}
                  id={`otp-${index}`}
                  type="text"
                  maxLength={1}
                  value={num}
                  onChange={(e) => handleOtp(index, e.target.value)}
                  className="w-12 h-12 border-2 border-gray-300 rounded-md text-center text-lg font-bold focus:outline-none focus:ring-2 focus:ring-orange-400"
                />
              ))}
            </div>
            <button onClick={handleOtpSubmit}
              className="mt-5 text-white border-2 border-white rounded-full px-8 md:px-12 py-2 font-semibold hover:bg-white hover:text-zinc-800">
              ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP
            </button>
          </div>
        </div>
      )}
    </div>
  );
}




