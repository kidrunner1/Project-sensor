'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { loginUser } from '@/app/serviveAPI/Login/serviceLogin';
import Swal from 'sweetalert2';
import { verifyOtp } from '@/app/serviveAPI/OTP/otpService'; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ verifyOtp
import Link from 'next/link';
import { FaEnvelope, FaGoogle } from "react-icons/fa";
import { MdLockOutline } from "react-icons/md";
import dynamic from 'next/dynamic';
import InputField from './components/InputField';

// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Lottie JSON ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ Client-Side ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
const Lottie = dynamic(() => import('lottie-react'), { ssr: false });
import loadingAnimation from '@/app/animations/loading.json';

export default function Login() {
  const [identifier, setIdentifier] = useState('');
  const [password, setPassword] = useState('');
  const [otp, setOtp] = useState(Array(6).fill("")); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö OTP ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå 6 ‡∏ä‡πà‡∏≠‡∏á
  const [loading, setLoading] = useState(false);
  const [otpRequired, setOtpRequired] = useState(false);
  const [userId, setUserId] = useState(null);
  const [errors, setErrors] = useState({ identifier: '', password: '', login: '' });
  const [expiresAt, setExpiresAt] = useState(null);
  const router = useRouter();

  useEffect(() => {
    if (typeof window !== 'undefined') {
      const storedUserId = sessionStorage.getItem('user_id');
      if (storedUserId) {
        console.log("‚úÖ ‡∏û‡∏ö `user_id` ‡πÉ‡∏ô Local Storage:", storedUserId);
        router.push('/MainDashboard');
      }
    }
  }, []);

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Validation
  const validateInputs = () => {
    const newErrors = {};
    if (!identifier.trim()) {
      newErrors.identifier = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•";
    } else if (!/^[a-zA-Z0-9@.]+$/.test(identifier)) {
      newErrors.identifier = "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô A-Z, a-z, 0-9 ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô";
    }
    if (!password.trim()) {
      newErrors.password = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô";
    } else if (password.length < 6) {
      newErrors.password = "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£";
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleLoginSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    if (!validateInputs()) {
      Swal.fire({
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        icon: "warning",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á"
      });
      setLoading(false);
      return;
    }

    try {
      const loginResponse = await loginUser(identifier, password);
      if (loginResponse?.success) {
        setExpiresAt(loginResponse.expiresAt);

        if (loginResponse.otpRequired) {
          setOtpRequired(true);
          setUserId(loginResponse.userId);

          Swal.fire({
            title: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å OTP',
            text: '‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ OTP ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô',
            icon: 'info',
            confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
          });
        } else {
          sessionStorage.setItem('user_id', loginResponse.userId);

          Swal.fire({
            title: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
            text: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö!',
            icon: 'success',
            confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
          }).then(() => {
            router.push('/MainDashboard');
          });
        }
      } else {
        Swal.fire({
          title: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
          text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
          icon: 'error',
          confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
        });
      }
    } catch (error) {
      Swal.fire({
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        text: error.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ',
        icon: 'error',
        confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
      });
    } finally {
      setLoading(false);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï OTP ‡∏ó‡∏µ‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ + ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)
  const handleOtp = (index, value) => {
    if (!/^[a-zA-Z0-9]*$/.test(value)) return; // ‚úÖ ‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ A-Z, a-z, 0-9

    const newOtp = [...otp];
    newOtp[index] = value;
    setOtp(newOtp);

    // ‚úÖ ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏ä‡πà‡∏≠‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à
    if (value && index < 5) {
      document.getElementById(`otp-${index + 1}`)?.focus();
    }
  };

  const handleOtpSubmit = async () => {
    const otpString = otp.join(""); // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á

    if (!otpString || !userId) {
      Swal.fire({
        title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å OTP ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô",
        text: "OTP ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ",
        icon: "warning",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      });
      return;
    }

    try {
      console.log("üîπ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á API Verify OTP:", { userId, otpString });

      const otpResponse = await verifyOtp(userId, otpString); // ‚úÖ ‡∏™‡πà‡∏á OTP ‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô String

      console.log("üìå OTP API Response:", otpResponse);

      if (otpResponse?.message.toLowerCase().includes("otp verified")) {
        const finalUserId = otpResponse.user_id || userId;
        console.log("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å user_id ‡∏•‡∏á Local Storage:", finalUserId);

        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Local Storage
        sessionStorage.setItem("user_id", finalUserId);
        sessionStorage.setItem("access_token", otpResponse.access_token);
        sessionStorage.setItem("refresh_token", otpResponse.refresh_token);
        sessionStorage.setItem("access_expires_time", otpResponse.access_expires_time);
        sessionStorage.setItem("refresh_expires_time", otpResponse.refresh_expires_time);
        sessionStorage.setItem("roles", JSON.stringify(otpResponse.roles));

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ company_id ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        if (otpResponse.company_exist && otpResponse.company_id) {
          console.log("‚úÖ ‡∏°‡∏µ Company ID:", otpResponse.company_id);
          sessionStorage.setItem("company_id", otpResponse.company_id);
        } else {
          console.warn("üö® ‡πÑ‡∏°‡πà‡∏°‡∏µ Company ID! ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô sessionStorage");
          sessionStorage.removeItem("company_id"); // ‚ùå ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô sessionStorage
        console.log("üîç sessionStorage company_id:", sessionStorage.getItem("company_id"));

        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Company ID ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Dashboard
        if (otpResponse.company_exist) {
          Swal.fire({
            title: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
            text: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î...",
            icon: "success",
            confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
          }).then(() => {
            router.push("/MainDashboard");
          });

        } else {
          console.warn("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Company ID, ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô");
          Swal.fire({
            title: "‡πÄ‡∏û‡∏¥‡πà‡∏° Company ID ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!",
            text: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° Company ID ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö",
            icon: "warning",
            confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
          }).then(() => {
            router.push("/AddCompanyID"); // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Route ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
          });
        }
      } else {
        console.warn("‚ùå OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:", otpResponse?.message);
        Swal.fire({
          title: "OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
          text: otpResponse?.message || "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
          icon: "error",
          confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
        });
      }
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP:", error);
      Swal.fire({
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        text: error.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡πÑ‡∏î‡πâ",
        icon: "error",
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      });
    }
  };

  const handleOtpKeyDown = (e, index) => {
    if (e.key === "ArrowRight" && index < otp.length - 1) {
      document.getElementById(`otp-${index + 1}`)?.focus();
    }

    if (e.key === "ArrowLeft" && index > 0) {
      document.getElementById(`otp-${index - 1}`)?.focus();
    }

    if (e.key === "Backspace" && !otp[index] && index > 0) {
      document.getElementById(`otp-${index - 1}`)?.focus();
    }
  };

  return (
    <div className="relative flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-gray-900 via-black to-gray-900">
      <main className="flex flex-col items-center justify-center w-full flex-1 px-6 md:px-20 text-center">
        {/* ‚úÖ ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÅ‡∏™‡∏á‡πÑ‡∏ü */}
        <div className="absolute inset-0 bg-gradient-to-br from-blue-400/30 to-purple-500/20 blur-[200px] opacity-40"></div>
        <div className="bg-white backdrop-blur-lg rounded-2xl shadow-2xl flex flex-col md:flex-row w-full max-w-4xl overflow-hidden transition-all duration-500">
          {/* LEFT SECTION */}
          <div className='w-full md:w-3/5 p-8 md:p-10'>
            <div className='font-bold text-zinc-800 text-2xl flex justify-center'>
              <span className="text-zinc-800 tracking-wide">DOGNOSE</span>
            </div>
            <div className="border-2 w-12 border-zinc-800 inline-block my-3"></div>
            <h2 className="text-2xl md:text-3xl font-bold text-zinc-800 mb-4 animate-fade-in">
              ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
            </h2>
            <p className="text-sm text-gray-600 mb-5 text-center">
              ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Ç‡∏≠‡∏á DOGNOSE
            </p>

            {/* Login Form */}
            <form onSubmit={handleLoginSubmit} className="flex flex-col items-center text-left space-y-4">
              <InputField
                type="text"
                name="identifier"
                value={identifier}
                onChange={(e) =>
                  setIdentifier(e.target.value)}
                placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
                icon={FaEnvelope}
                error={errors.identifier}
              />
              <InputField
                type="password"
                name="password"
                value={password}
                onChange={(e) =>
                  setPassword(e.target.value)}
                placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                icon={MdLockOutline}
                error={errors.password}
              />
              <div className="flex justify-end w-full md:w-64 mt-2 mb-2">
                <Link href="/ForgotPassword" className="text-xs text-zinc-800 hover:underline">
                  ‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô?
                </Link>
              </div>

              {/* Submit Button */}
              <button type="submit" disabled={loading} className="relative border-2 border-zinc-800 text-zinc-800 rounded-full px-8 md:px-12 py-2 font-semibold hover:bg-zinc-800 hover:text-white transition-all duration-300 group overflow-hidden shadow-md">
                {loading ? <Lottie animationData={loadingAnimation} loop={true} className="w-8 h-8" /> : <span className="relative z-10">‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</span>}
                <div className="absolute inset-0 bg-zinc-800 transform scale-0 group-hover:scale-100 transition-all duration-300 rounded-full"></div>
              </button>

              {/* Register Link */}
              <p className="text-sm text-gray-600 mt-4">
                ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ? <Link href="/Register" className="text-blue-600 hover:underline">‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ</Link>
              </p>
            </form>
          </div>

          {/* RIGHT SECTION */}
          <div
            className="relative w-full md:w-2/5 text-white rounded-tl-lg rounded-b-lg md:rounded-tr-2xl md:rounded-br-2xl py-12 px-6 md:py-36 flex flex-col items-center transition-all duration-500 bg-cover bg-center bg-no-repeat"
            style={{ backgroundImage: "url('/images/bg-login.png')" }}
          >

            {/* üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á Layer ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ö‡∏•‡∏≠ */}
            <div className="absolute inset-0 bg-black/20 backdrop-blur-xl z-0"></div>

            {/* üîπ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ `relative z-10` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á) */}
            <div className="relative z-10 text-center">
              <h2 className="text-2xl md:text-3xl font-bold mb-2 animate-slide-in">
                ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö!
              </h2>
              <div className="border-2 w-12 border-white inline-block mb-2"></div>
              <p className="mb-6 md:mb-10 text-sm">
                ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á <strong>‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏°‡∏•‡∏û‡∏¥‡∏©</strong> ‡πÅ‡∏•‡∏∞
                <strong>‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞</strong>
                <br />
                ‡πÉ‡∏´‡πâ DOGNOSE ‡∏î‡∏π‡πÅ‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏∏‡∏Å‡∏ó‡∏µ‡πà ‡∏ó‡∏∏‡∏Å‡πÄ‡∏ß‡∏•‡∏≤
              </p>
            </div>

          </div>

        </div>
      </main>

      {/* ‡∏ü‡∏≠‡∏£‡πå‡∏° OTP */}
      {otpRequired && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
          <div className="bg-zinc-800 p-6 rounded-lg shadow-lg w-[400px] text-center ">
            {/* ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô */}
            <div className='flex flex-col items-center'>
              <img src="/images/OTP.png" alt="OTP Icon" className='w-16 h-16' />
              <h2 className='text-xl font-bold mt-3 text-zinc-100'>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h2>
              <p className="text-gray-500 text-sm mt-1">
                ‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™ OTP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠.
              </p>
            </div>
            {/* ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å OTP ‡πÅ‡∏ö‡∏ö‡πÅ‡∏¢‡∏Å 6 ‡∏ä‡πà‡∏≠‡∏á */}
            <div className='flex justify-center gap-2 mt-5'>
              {otp.map((num, index) => (
                <input
                  key={index}
                  id={`otp-${index}`}
                  type="text"
                  maxLength={1}
                  value={num}
                  onChange={(e) => handleOtp(index, e.target.value)}
                  onKeyDown={(e) => handleOtpKeyDown(e, index)} // ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Key Events
                  className="w-12 h-12 border-2 border-gray-300 rounded-md text-center text-lg font-bold focus:outline-none focus:ring-2 focus:ring-green-500"
                />
              ))}
            </div>

            <button onClick={handleOtpSubmit}
              className="mt-5 text-white border-2 border-white rounded-full px-8 md:px-12 py-2 font-semibold hover:bg-white hover:text-zinc-800">
              ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP
            </button>
          </div>
        </div>
      )}
    </div>
  );
}