"use client";
import { useParams } from "next/navigation";
import { useSensorStore } from "@/app/serviveAPI/LoadDataSensor/ServiceLoadData";
import { useState } from "react";
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from "recharts";

export default function SensorDetail() {
  const { id } = useParams(); // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ id ‡∏à‡∏≤‡∏Å URL
  const { sensorData, loading, error } = useSensorStore();
  const [selectedParam, setSelectedParam] = useState<string | null>(null); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π

  if (!id) return <p>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>;

  const sensor = sensorData[id];

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Parameter ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á
  const selectedData = selectedParam
    ? [...sensor.environmental, ...sensor.gas].find((p) => p.param === selectedParam)?.readings || []
    : [];

  // ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠: id, data, type, name, value, unit
  const formattedData = selectedData.map((d) => ({
    id: d.id,
    timestamp: new Date(d.timestamp).toLocaleTimeString(), // üïí ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    type: d.type, // üè∑Ô∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    name: d.param, // üìå ‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
    value: d.value, // üìä ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ
    unit: d.unit, // üî¢ ‡∏´‡∏ô‡πà‡∏ß‡∏¢
  }));

  return (
    <div className="p-5">
      <h1 className="text-xl font-bold">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Sensor {id}</h1>

      {loading && <p>üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>}
      {error && <p className="text-red-500">‚ùå {error}</p>}

      {sensor ? (
        <div>
          <h2 className="text-lg font-bold mb-2">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á</h2>
          <div className="grid grid-cols-2 gap-2 mb-5">
            {sensor.environmental.map((param) => (
              <button
                key={`env-${param.id_param}`}
                className={`px-4 py-2 rounded-lg ${
                  selectedParam === param.param ? "bg-green-500 text-white" : "bg-gray-300"
                }`}
                onClick={() => setSelectedParam(param.param)}
              >
                üåç {param.param}
              </button>
            ))}
            {sensor.gas.map((param) => (
              <button
                key={`gas-${param.id_param}`}
                className={`px-4 py-2 rounded-lg ${
                  selectedParam === param.param ? "bg-green-500 text-white" : "bg-gray-300"
                }`}
                onClick={() => setSelectedParam(param.param)}
              >
                üî• {param.param}
              </button>
            ))}
          </div>

          {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á */}
          {selectedParam && formattedData.length > 0 ? (
            <div className="mt-5">
              <h2 className="text-lg font-bold mb-2">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {selectedParam}</h2>
              <div className="overflow-x-auto">
                <table className="w-full table-auto border-collapse border border-gray-400">
                  <thead>
                    <tr className="bg-gray-700 text-white">
                      <th className="border border-gray-400 px-4 py-2">ID</th>
                      <th className="border border-gray-400 px-4 py-2">Data</th>
                      <th className="border border-gray-400 px-4 py-2">Type</th>
                      <th className="border border-gray-400 px-4 py-2">Name</th>
                      <th className="border border-gray-400 px-4 py-2">Value</th>
                      <th className="border border-gray-400 px-4 py-2">Unit</th>
                    </tr>
                  </thead>
                  <tbody>
                    {formattedData.map((d) => (
                      <tr key={d.id} className="text-center">
                        <td className="border border-gray-400 px-4 py-2">{d.id}</td>
                        <td className="border border-gray-400 px-4 py-2">{d.timestamp}</td>
                        <td className="border border-gray-400 px-4 py-2">{d.type}</td>
                        <td className="border border-gray-400 px-4 py-2">{d.name}</td>
                        <td className="border border-gray-400 px-4 py-2">{d.value}</td>
                        <td className="border border-gray-400 px-4 py-2">{d.unit}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>

              {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü */}
              <div className="mt-5">
                <h2 className="text-lg font-bold">‡∏Å‡∏£‡∏≤‡∏ü {selectedParam}</h2>
                <ResponsiveContainer width="100%" height={300}>
                  <LineChart data={formattedData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="timestamp" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Line type="monotone" dataKey="value" stroke="#8884d8" activeDot={{ r: 8 }} />
                  </LineChart>
                </ResponsiveContainer>
              </div>
            </div>
          ) : (
            <p className="mt-4 text-gray-500">üîΩ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü</p>
          )}
        </div>
      ) : (
        <p>‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>
      )}
    </div>
  );
}
