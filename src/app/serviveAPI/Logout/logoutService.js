import axios from "axios";
import ipconfig from "@/app/ipconfig";
import Swal from "sweetalert2";

// ‚úÖ URL API
const REFRESH_API = `http://${ipconfig.API_HOST}/api/auth/refresh-access-token`;
const LOGOUT_API = `http://${ipconfig.API_HOST}/api/auth/logout`;

export async function logoutUser() {
    let accessToken = localStorage.getItem("access_token");
    const refreshToken = localStorage.getItem("refresh_token");
    const userId = localStorage.getItem("user_id");

    // if (!userId || !refreshToken) {
    //     console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö `user_id` ‡∏´‡∏£‡∏∑‡∏≠ `refresh_token` ‚Üí ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á Login ‡πÉ‡∏´‡∏°‡πà");
    //     localStorage.clear();
    //     window.location.href = "/";
    //     return;
    // }

    console.log("üîπ `user_id` ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Logout:", userId);
    console.log("üîπ `access_token` ‡∏Å‡πà‡∏≠‡∏ô Logout:", accessToken);
    console.log("üîπ `refresh_token` ‡∏Å‡πà‡∏≠‡∏ô Logout:", refreshToken);

    try {
        // ‚úÖ 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Access Token ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API `/auth/refresh-access-token`
        console.log("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Access Token...");

        let newAccessToken = null; // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Access Token ‡πÉ‡∏´‡∏°‡πà
        const refreshResponse = await axios.post(REFRESH_API, {
            user_id: userId,
            access_token: accessToken
        }, {
            headers: {
                Authorization: `Bearer ${refreshToken}`, // ‚úÖ ‡πÉ‡∏ä‡πâ Refresh Token ‡πÉ‡∏ô Header
                "Content-Type": "application/json"
            }
        });

        console.log("üîÑ ‚úÖ Refresh Token Response:", refreshResponse.data);

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà API ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
        const isExpired = refreshResponse.data.hasOwnProperty("is_expired") ? String(refreshResponse.data.is_expired) : "false";
        const isRevoked = refreshResponse.data.hasOwnProperty("is_revoked") ? !!refreshResponse.data.is_revoked : false;
        newAccessToken = refreshResponse.data.new_access_token || null;

        const NewAC = localStorage.setItem("new_access_token", newAccessToken); // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å new_access_token ‡∏•‡∏á Local Storage

        console.log("üîπ user_status:", refreshResponse.data.user_status);
        console.log("üîπ is_expired (string):", isExpired);
        console.log("üîπ is_revoked (boolean):", isRevoked);
        console.log("üîπ new_access_token ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API:", newAccessToken || "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Access Token ‡πÉ‡∏´‡∏°‡πà");
        console.log("üîπ revoked_reason:", refreshResponse.data.revoked_reason);
        console.log("üîπ new_access_token ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:", NewAC);

        // ‚úÖ ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà 1: ‡∏ñ‡πâ‡∏≤ `user_status = online` ‡πÅ‡∏•‡∏∞ `is_expired = "false"`
        if (refreshResponse.data.user_status === "online" && isExpired === "false") {
            console.log("‚úÖ Access Token ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‚Üí ‡πÉ‡∏ä‡πâ‡∏ó‡∏≥ Logout");
            accessToken = localStorage.getItem("access_token"); // ‚úÖ ‡πÉ‡∏ä‡πâ Access Token ‡πÄ‡∏î‡∏¥‡∏°
        }

        // ‚úÖ ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà 2: ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ `"is_expired": "true", "is_revoked": true` ‚Üí ‡πÉ‡∏ä‡πâ `new_access_token` ‡∏ó‡∏≥ Logout
        else if (isExpired === "true" && isRevoked && newAccessToken) {
            // ‚ùå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ new_access_token ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà refresh_token
            if (newAccessToken === refreshToken) {
                console.error("‚ùå new_access_token ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô refresh_token ‡∏ã‡∏∂‡πà‡∏á‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!");
                await Swal.fire({
                    title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
                    text: "API ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Token ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà",
                    icon: "error",
                    confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á"
                });
                localStorage.clear();
                window.location.href = "/";
                return;
            }


            // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Access Token ‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á Local Storage
            localStorage.setItem("access_token", newAccessToken);
            localStorage.setItem("new_access_token", newAccessToken); // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å new_access_token ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
            console.log("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï new_access_token ‡πÉ‡∏ô Local Storage:", newAccessToken);

            // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Local Storage ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
            accessToken = localStorage.getItem("new_access_token");
            console.log("üîÑ `access_token` ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:", accessToken);
        }

        // ‚ùå ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Access Token ‡πÉ‡∏´‡∏°‡πà ‚Üí ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Login ‡πÉ‡∏´‡∏°‡πà
        else {
            console.warn("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Access Token ‡πÉ‡∏´‡∏°‡πà ‚Üí ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Login ‡πÉ‡∏´‡∏°‡πà");
            localStorage.clear();
            await Swal.fire({
                title: "‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏",
                text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà",
                icon: "warning",
                confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á"
            });
            window.location.href = "/";
            return;
        }

        // ‚úÖ Debug ‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å `/auth/logout`
        console.log("üöÄ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠ Logout...");
        console.log("üîπ `user_id` ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ:", userId);
        console.log("üîπ `access_token` ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ:", accessToken);

        // ‚úÖ 2. ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠ Logout ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Access Token ‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        try {
            // ‚úÖ Debug ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á API Logout
            console.log("üîπ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô Logout...");
            console.log("üîπ URL API:", LOGOUT_API);
            console.log("üîπ Header ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡πÑ‡∏õ:", {
                Authorization: `${accessToken}`,
                "Content-Type": "application/json"
            });
            console.log("üîπ Body ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡πÑ‡∏õ:", { user_id: userId });

            // ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠ Logout ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Access Token ‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            const logoutResponse = await axios.post(LOGOUT_API, { user_id: userId }, {
                headers: {
                    Authorization: `${accessToken}`,
                    "Content-Type": "application/json"
                }
            });

            console.log("‚úÖ Logout API Response:", logoutResponse.data);

            if (logoutResponse.data.status === "logged_out") {
                await Swal.fire({
                    title: "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
                    text: logoutResponse.data.message || "‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß",
                    icon: "success",
                    confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á"
                });

                // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Local Storage ‡πÅ‡∏•‡∏∞ Redirect
                localStorage.clear();
                window.location.href = "/";
            } else {
                throw new Error("‚ùå Logout failed: Unexpected response.");
            }

        } catch (logoutError) {
            console.error("‚ùå Logout API Error:", logoutError);

            const errorMessage =
                logoutError.response?.data?.message || // ‚úÖ ‡πÉ‡∏ä‡πâ ?. ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Error
                logoutError.message ||
                "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ";

            await Swal.fire({
                title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
                text: errorMessage,
                icon: "error",
                confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á"
            });
        }

    } catch (error) {
        console.error("‚ùå Logout error:", error.response?.data || error.message);
        throw new Error(`Logout failed: ${error.response?.data?.message || error.message}`);
    }
}






