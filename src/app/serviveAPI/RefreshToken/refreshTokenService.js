// import axios from "axios";
// import ipconfig from "@/app/ipconfig";

// // ‚úÖ URL API
// const REFRESH_API = `http://${ipconfig.API_HOST}/api/auth/refresh-access-token`;

// export async function refreshAccessToken() {
//     const refreshToken = localStorage.getItem("refresh_token");
//     const userId = localStorage.getItem("user_id");
//     const currentAccessToken = localStorage.getItem("access_token");

//     if (!refreshToken || !userId) {
//         console.warn("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Refresh Token ‡∏´‡∏£‡∏∑‡∏≠ User ID ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Login ‡πÉ‡∏´‡∏°‡πà");
//         return null;
//     }

//     try {
//         console.log("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á Refresh Access Token...");

//         const response = await axios.post(REFRESH_API, {
//             user_id: userId,
//             access_token: currentAccessToken, // ‚úÖ ‡∏™‡πà‡∏á access_token ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏´‡πâ API
//         }, {
//             headers: {
//                 Authorization: `Bearer ${refreshToken}`, // ‚úÖ ‡πÉ‡∏ä‡πâ Refresh Token ‡πÉ‡∏ô Header
//                 "Content-Type": "application/json"
//             }
//         });

//         console.log("üîÑ Refreshed Token Response:", response.data);

//         // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ response
//         const isExpired = response.data.hasOwnProperty("is_expired") ? !!response.data.is_expired : false;
//         const isRevoked = response.data.hasOwnProperty("is_revoked") ? !!response.data.is_revoked : false;
//         let newAccessToken = response.data.new_access_token || response.data.access_token || null;

//         console.log("üîπ is_expired:", isExpired);
//         console.log("üîπ is_revoked:", isRevoked);
//         console.log("üîπ new_access_token:", newAccessToken || "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Access Token ‡πÉ‡∏´‡∏°‡πà");

//         // ‚ùå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ new_access_token ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà refresh_token
//         if (newAccessToken === refreshToken) {
//             console.error("‚ùå new_access_token ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô refresh_token ‡∏ã‡∏∂‡πà‡∏á‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!");
//             localStorage.clear();
//             return null;
//         }

//         // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ new_access_token ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
//         if (newAccessToken) {
//             localStorage.setItem("access_token", newAccessToken);
//             localStorage.setItem("access_expires_time", response.data.access_expires);
//             localStorage.setItem("refresh_token", response.data.refresh_token);
//             localStorage.setItem("refresh_expires_time", response.data.refresh_expires);
//             localStorage.setItem("user_status", response.data.user_status);

//             console.log("‚úÖ Access Token ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß:", newAccessToken);
//             return newAccessToken;
//         }

//         console.warn("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Access Token ‡πÉ‡∏ô Response ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Login ‡πÉ‡∏´‡∏°‡πà");
//         return null;
//     } catch (error) {
//         console.error("‚ùå Refresh token failed:", error.response?.data || error.message);

//         if (error.response?.status === 401) {
//             console.warn("üîÑ Refresh Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‚Üí ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á Login ‡πÉ‡∏´‡∏°‡πà");
//             localStorage.clear();
//             return null;
//         }

//         return null;
//     }
// }

import axios from "axios";
import ipconfig from "@/app/ipconfig";

// ‚úÖ URL API
const REFRESH_API = `http://${ipconfig.API_HOST}/api/auth/refresh-access-token`;

export async function refreshAccessToken() {
    const refreshToken = localStorage.getItem("refresh_token");
    const userId = localStorage.getItem("user_id");
    const currentAccessToken = localStorage.getItem("access_token");

    if (!refreshToken || !userId) {
        console.warn("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Refresh Token ‡∏´‡∏£‡∏∑‡∏≠ User ID ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Login ‡πÉ‡∏´‡∏°‡πà");
        return null;
    }

    try {
        console.log("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á Refresh Access Token...");

        const response = await axios.post(REFRESH_API, {
            user_id: userId,
            access_token: currentAccessToken, // ‚úÖ ‡∏™‡πà‡∏á access_token ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏´‡πâ API
        }, {
            headers: {
                Authorization: `Bearer ${refreshToken}`, // ‚úÖ ‡πÉ‡∏ä‡πâ Refresh Token ‡πÉ‡∏ô Header
                "Content-Type": "application/json"
            }
        });

        console.log("üîÑ Refreshed Token Response:", response.data);

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Response ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
        const {
            access_token: newAccessToken,
            refresh_token: newRefreshToken,
            access_expires: accessExpires,
            refresh_expires: refreshExpires,
            user_status,
            company_exist,
            company_id
        } = response.data;

        console.log("üîπ Access Token ‡πÉ‡∏´‡∏°‡πà:", newAccessToken || "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Access Token");
        console.log("üîπ Refresh Token ‡πÉ‡∏´‡∏°‡πà:", newRefreshToken || "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Refresh Token");
        console.log("üîπ ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ Access Token:", accessExpires);
        console.log("üîπ ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ Refresh Token:", refreshExpires);
        console.log("üîπ User Status:", user_status);
        console.log("üîπ ‡∏°‡∏µ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà:", company_exist);
        console.log("üîπ Company ID:", company_id || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");

        // ‚ùå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ new_access_token ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà refresh_token
        if (newAccessToken === refreshToken) {
            console.error("‚ùå new_access_token ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô refresh_token ‡∏ã‡∏∂‡πà‡∏á‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!");
            localStorage.clear();
            return null;
        }

        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ new_access_token ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
        if (newAccessToken) {
            localStorage.setItem("access_token", newAccessToken);
            localStorage.setItem("access_expires_time", accessExpires);
            localStorage.setItem("refresh_token", newRefreshToken);
            localStorage.setItem("refresh_expires_time", refreshExpires);
            localStorage.setItem("user_status", user_status);

            if (company_exist) {
                localStorage.setItem("company_id", company_id);
            } else {
                localStorage.removeItem("company_id");
            }

            console.log("‚úÖ Access Token ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß:", newAccessToken);
            return newAccessToken;
        }

        console.warn("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Access Token ‡πÉ‡∏ô Response ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Login ‡πÉ‡∏´‡∏°‡πà");
        return null;
    } catch (error) {
        console.error("‚ùå Refresh token failed:", error.response?.data || error.message);

        if (error.response?.status === 401) {
            console.warn("üîÑ Refresh Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‚Üí ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á Login ‡πÉ‡∏´‡∏°‡πà");
            localStorage.clear();
            return null;
        }

        return null;
    }
}

